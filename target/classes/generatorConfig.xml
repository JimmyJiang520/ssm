<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 配置生成器 -->
<generatorConfiguration>
    <!--
        导入属性配置
        可以用于加载配置项或者配置文件，在整个配置文件中就可以使用${propertyKey}的方式来引用配置项
        resource：配置资源加载地址，使用resource，MBG从classpath开始找，比如com/myProject/generatorConfig.properties
        url：配置资源加载地质，使用URL的方式，比如file:///C:/myFolder/generatorConfig.properties
        注意，两个属性只能选址一个;

        另外，如果使用了mybatis-generator-maven-plugin，那么在pom.xml中定义的properties都可以直接在generatorConfig.xml中使用
        <properties resource="" url="" />
    -->
    <properties resource="generator.properties"></properties>

    <!--指定特定数据库的jdbc驱动jar包的位置 -->
    <classPathEntry location="${jdbc.driverLocation}"/>

    <!--
        一个数据库对应一个context
        context：生成一组对象的环境
        id：必选，上下文id，用于在生成错误时提示
        defaultModelType：指定生成对象的样式（非必须）
            1、conditional：类似hierarchical；
            2、flat：所有内容（主键，blob）等全部生成在一个对象中；
            3、hierarchical：主键生成一个XXKey对象(key class)，Blob等单独生成一个对象，其他简单属性在一个对象中(record class)
        targetRuntime：
            1、MyBatis3：默认的值，生成基于MyBatis3.x以上版本的内容，包括XXXBySample；
            2、MyBatis3Simple：类似MyBatis3，只是不生成XXXBySample；
        introspectedColumnImpl：类全限定名，用于扩展MBG（非必须）
    -->
    <context id="default" targetRuntime="MyBatis3">

        <!-- 以下整段非必须 -->
        <!--&lt;!&ndash;-->
            <!--自动识别数据库关键字，默认false，如果设置为true，根据SqlReservedWords中定义的关键字列表；-->
            <!--一般保留默认值，遇到数据库关键字（Java关键字），使用columnOverride覆盖-->
        <!--&ndash;&gt;-->
        <!--<property name="autoDelimitKeywords" value="false"/>-->
        <!--&lt;!&ndash; 生成的Java文件的编码 &ndash;&gt;-->
        <!--<property name="javaFileEncoding" value="UTF-8"/>-->
        <!--&lt;!&ndash; 格式化java代码 &ndash;&gt;-->
        <!--<property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>-->
        <!--&lt;!&ndash; 格式化XML代码 &ndash;&gt;-->
        <!--<property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>-->

        <!--&lt;!&ndash; beginningDelimiter和endingDelimiter：指明数据库的用于标记数据库对象名的符号，比如ORACLE就是双引号，MYSQL默认是`反引号 &ndash;&gt;-->
        <!--<property name="beginningDelimiter" value="`"/>-->
        <!--<property name="endingDelimiter" value="`"/>-->
        <!--&lt;!&ndash; 配置内置的或者自定义的Plugin &ndash;&gt;-->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />-->

        <!-- 旨在创建class时，对取消注释进行控制 true：取消；false：不取消（非必须）-->
        <commentGenerator>
            <!-- 是否取消注释 -->
            <property name="suppressAllComments" value="false"/>
            <!-- 是否生成注释代时间戳-->
            <property name="suppressDate" value="false" />
        </commentGenerator>

        <!--jdbc数据库连接 -->
        <jdbcConnection
                driverClass="${jdbc.driverClass}"
                connectionURL="${jdbc.connectionURL}"
                userId="${jdbc.userId}"
                password="${jdbc.password}">
        </jdbcConnection>

        <!-- java类型处理器，在数据库类型和java类型之间的转换控制（非必需）-->
        <javaTypeResolver >
            <!--
                true：使用BigDecimal对应DECIMAL和NUMERIC数据类型
                false：默认,
                    scale>0;length>18：使用BigDecimal;
                    scale=0;length[10,18]：使用Long；
                    scale=0;length[5,9]：使用Integer；
                    scale=0;length<5：使用Short；
            -->
            <property name="forceBigDecimals" value="false" />
        </javaTypeResolver>

        <!--========================================java模型生成器=====================================================-->
        <!--
            作用：
                1，生成含有主键key的类（见context的defaultModelType）
                2，java类
                3，查询类
            targetPackage：指定生成的model生成所在的包名，真实的包受enableSubPackages属性控制；
            targetProject：指定在该项目下所在的路径，如果目录不存在，MBG不会自动建目录（注意目录必须存在）
        -->
        <javaModelGenerator targetPackage="com.maoyan.ssm.model" targetProject="src/main/java">
            <!-- 是否对model添加构造函数，构造方法包含了所有的field，而不是使用setter -->
            <property name="constructorBased" value="true"/>

            <!--
                是否允许子包，即targetPackage.schemaName.tableName
                在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false
            -->
            <property name="enableSubPackages" value="false"/>

            <!-- 建立的Model对象是否不可改变，即生成的Model对象不会有setter方法，只有构造方法 -->
            <property name="immutable" value="false"/>

            <!--
                设置一个根对象，如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
                注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，
                包括：属性名相同，类型相同，有相同的getter/setter方法；
            -->
            <!--<property name="rootClass" value="com.maoyan.ssm.model"/>-->

            <!-- 是否对String类型的列的数据在getter方法中进行trim操作 -->
            <property name="trimStrings" value="true"/>
        </javaModelGenerator>

        <!--========================================sqlMap的XML文件生成器==============================================-->
        <!--
            作用：为每一个数据库的表生成对应的SqlMap文件
            注意，在Mybatis3之后，我们可以使用mapper.xml文件+Mapper接口（或者不用mapper接口），
            或者只使用Mapper接口+Annotation，所以，如果 javaClientGenerator配置中配置了需要生成XML的话，这个元素就必须配置
            targetPackage/targetProject的填写：同javaModelGenerator
        -->
        <sqlMapGenerator targetPackage="mapper" targetProject="src/main/resources">
            <!--
                是否允许子包，即targetPackage.schemaName.tableName
                在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false
            -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--=============================================Mapper接口===================================================-->
        <!--
            客户端代码，生成易于使用的针对Model对象和XML配置文件的代码，注意，如果没有配置该元素，那么默认不会生成Mapper接口
            targetPackage/targetProject的填写：同javaModelGenerator
            type：选择怎么生成mapper接口（在MyBatis3/MyBatis3Simple下）：
                1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
                2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
                3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
            注意，如果context是MyBatis3Simple：只支持ANNOTATEDMAPPER和XMLMAPPER
         -->
        <javaClientGenerator targetPackage="com.maoyan.ssm.dao" targetProject="src/main/java" type="MIXEDMAPPER">
            <!--
                是否允许子包，即targetPackage.schemaName.tableName
                在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false
            -->
            <property name="enableSubPackages" value="false"/>
            <!--
                定义Maper.java源代码中的ByExample()方法的可视性，可选的值有：
                    public;
                    private;
                    protected;
                    default
                注意：如果targetRuntime="MyBatis3"，此参数被忽略
             -->
            <property name="exampleMethodVisibility" value=""/>
            <!--
                方法名计数器
                注意：如果targetRuntime="MyBatis3"，此参数被忽略
            -->
            <property name="methodNameCalculator" value=""/>

            <!--
                为生成的接口添加父接口，但是MBG只负责生成，不负责检查
            -->
            <property name="rootInterface" value=""/>
        </javaClientGenerator>

        <!--=======================================选择tableName生成文件===============================================-->
        <!--
            选择一个table来生成相关文件，可以有一个或多个table，必须要有table元素
            选择的table会生成一下文件：
                1、SQL map文件
                2、生成一个主键类；
                3、除了BLOB和主键的其他字段的类；
                4、包含BLOB的类；
                5、一个用户生成动态查询的条件类（selectByExample, deleteByExample），可选；
                6、Mapper接口（可选）

            必要:
            tableName：要生成对象的表名
                注意：大小写敏感问题。正常情况下，MBG会自动的去识别数据库标识符的大小写敏感度，在一般情况下，MBG会根据设置的schema，catalog或tableName去查询数据表，按照下面的流程：
            1，如果schema，catalog或tableName中有空格，那么设置的是什么格式，就精确的使用指定的大小写格式去查询；
            2，否则，如果数据库的标识符使用大写的，那么MBG自动把表名变成大写再查找；
            3，否则，如果数据库的标识符使用小写的，那么MBG自动把表名变成小写再查找；
            4，否则，使用指定的大小写格式查询；
            另外的，如果在创建表的时候，使用的""把数据库对象规定大小写，就算数据库标识符是使用的大写，在这种情况下也会使用给定的大小写来创建表名；
            这个时候，请设置delimitIdentifiers="true"即可保留大小写格式；

            可选：
            1、schema：数据库的schema，即为数据库名；
            2、catalog：数据库的catalog；
            3、alias：为数据表设置的别名，如果设置了alias，那么生成的所有的SELECT SQL语句中，列名会变成：alias_actualColumnName
            4、domainObjectName：生成的domain类的名字，如果不设置，直接使用表名作为domain类的名字；可以设置为somepck.domainName，那么会自动把domainName类再放到somepck包里面；
            5、enableInsert（默认true）：指定是否生成insert语句；
            6、enableSelectByPrimaryKey（默认true）：指定是否生成按照主键查询对象的语句（就是getById或get）；
            7、enableSelectByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询语句；
            8、enableUpdateByPrimaryKey（默认true）：指定是否生成按照主键修改对象的语句（即update)；
            9、enableDeleteByPrimaryKey（默认true）：指定是否生成按照主键删除对象的语句（即delete）；
            10、enableDeleteByExample（默认true）：MyBatis3Simple为false，指定是否生成动态删除语句；
            11、enableCountByExample（默认true）：MyBatis3Simple为false，指定是否生成动态查询总条数语句（用于分页的总条数查询）；
            12、enableUpdateByExample（默认true）：MyBatis3Simple为false，指定是否生成动态修改语句（只修改对象中不为空的属性）；
            13、modelType：参考context元素的defaultModelType，相当于覆盖；
            14、delimitIdentifiers：参考tableName的解释，注意，默认的delimitIdentifiers是双引号，如果类似MYSQL这样的数据库，使用的是`（反引号，那么还需要设置context的beginningDelimiter和endingDelimiter属性）
            15、delimitAllColumns：设置是否所有生成的SQL中的列名都使用标识符引起来。默认为false，delimitIdentifiers参考context的属性

            注意，table里面很多参数都是对javaModelGenerator，context等元素的默认属性的一个复写；
         -->
        <table schema="${jdbc.name}" tableName="${jdbc.tableName}" domainObjectName="User"  enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
            <generatedKey column="id" sqlStatement="Mysql"/>

            <!--&lt;!&ndash; optional   , only for mybatis3 runtime-->
                 <!--自动生成的键值（identity,或者序列值）-->
               <!--如果指定此元素，MBG将会生成<selectKey>元素，然后将此元素插入到SQL Map的<insert> 元素之中-->
               <!--sqlStatement 的语句将会返回新的值-->
               <!--如果是一个自增主键的话，你可以使用预定义的语句,或者添加自定义的SQL语句. 预定义的值如下:-->
                  <!--Cloudscape 	This will translate to: VALUES IDENTITY_VAL_LOCAL()-->
                  <!--DB2: 		VALUES IDENTITY_VAL_LOCAL()-->
                  <!--DB2_MF:		SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1-->
                  <!--Derby: 		VALUES IDENTITY_VAL_LOCAL()-->
                  <!--HSQLDB: 	CALL IDENTITY()-->
                  <!--Informix: 	select dbinfo('sqlca.sqlerrd1') from systables where tabid=1-->
                  <!--MySql: 		SELECT LAST_INSERT_ID()-->
                  <!--SqlServer: 	SELECT SCOPE_IDENTITY()-->
                  <!--SYBASE: 	SELECT @@IDENTITY-->
                  <!--JDBC:		This will configure MBG to generate code for MyBatis3 suport of JDBC standard generated keys. This is a database independent method of obtaining the value from identity columns.-->
                  <!--identity: 自增主键  If true, then the column is flagged as an identity column and the generated <selectKey> element will be placed after the insert (for an identity column). If false, then the generated <selectKey> will be placed before the insert (typically for a sequence).-->
            <!--&ndash;&gt;-->
            <!--<generatedKey column="" sqlStatement="" identity="" type=""/>-->


            <!--&lt;!&ndash; optional.-->
                    <!--列的命名规则：-->
                    <!--MBG使用 <columnRenamingRule> 元素在计算列名的对应 名称之前，先对列名进行重命名，-->
                    <!--作用：一般需要对BUSI_CLIENT_NO 前的BUSI_进行过滤-->
                    <!--支持正在表达式-->
                     <!--searchString 表示要被换掉的字符串-->
                     <!--replaceString 则是要换成的字符串，默认情况下为空字符串，可选-->
            <!--&ndash;&gt;-->
            <!--<columnRenamingRule searchString="" replaceString=""/>-->

            <!--&lt;!&ndash; optional.告诉MBG忽略某一列，匹配column的值和数据库列的名称-->
                    <!--column，需要忽略的列-->
                    <!--delimitedColumnName:true 大小写完全匹配，false 忽略大小写匹配-->
                    <!--是否限定表的列名，即固定表列在Model中的名称-->
            <!--&ndash;&gt;-->
            <!--<ignoreColumn column=""  delimitedColumnName="" />-->

            <!--&lt;!&ndash;optional.覆盖MBG对Model 的生成规则-->
                 <!--column: 数据库的列名-->
                 <!--javaType: 对应的Java数据类型的完全限定名-->
                 <!--在必要的时候可以覆盖由JavaTypeResolver计算得到的java数据类型. For some databases, this is necessary to handle "odd" database types (e.g. MySql's unsigned bigint type should be mapped to java.lang.Object).-->
                 <!--jdbcType:该列的JDBC数据类型(INTEGER, DECIMAL, NUMERIC, VARCHAR, etc.)，该列可以覆盖由JavaTypeResolver计算得到的Jdbc类型，对某些数据库而言，对于处理特定的JDBC 驱动癖好 很有必要(e.g. DB2's LONGVARCHAR type should be mapped to VARCHAR for iBATIS).-->
                 <!--typeHandler:-->
            <!--&ndash;&gt;-->
            <!--<columnOverride column="" javaType="" jdbcType="" typeHandler="" delimitedColumnName="" />-->

        </table>
    </context>
</generatorConfiguration>